
PitchAngleControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002678  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002784  08002784  00003784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a8  080027a8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080027a8  080027a8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080027a8  080027a8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a8  080027a8  000037a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027ac  080027ac  000037ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080027b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080027bc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080027bc  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000742e  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001497  00000000  00000000  0000b463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0000c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000717  00000000  00000000  0000d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016626  00000000  00000000  0000d947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098e7  00000000  00000000  00023f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008426f  00000000  00000000  0002d854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1ac3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000b1b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b4344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800276c 	.word	0x0800276c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800276c 	.word	0x0800276c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <__aeabi_d2f>:
 8000928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800092c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000930:	bf24      	itt	cs
 8000932:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000936:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093a:	d90d      	bls.n	8000958 <__aeabi_d2f+0x30>
 800093c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000940:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000944:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000948:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800094c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800095c:	d121      	bne.n	80009a2 <__aeabi_d2f+0x7a>
 800095e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000962:	bfbc      	itt	lt
 8000964:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000968:	4770      	bxlt	lr
 800096a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000972:	f1c2 0218 	rsb	r2, r2, #24
 8000976:	f1c2 0c20 	rsb	ip, r2, #32
 800097a:	fa10 f30c 	lsls.w	r3, r0, ip
 800097e:	fa20 f002 	lsr.w	r0, r0, r2
 8000982:	bf18      	it	ne
 8000984:	f040 0001 	orrne.w	r0, r0, #1
 8000988:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000990:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000994:	ea40 000c 	orr.w	r0, r0, ip
 8000998:	fa23 f302 	lsr.w	r3, r3, r2
 800099c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a0:	e7cc      	b.n	800093c <__aeabi_d2f+0x14>
 80009a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009a6:	d107      	bne.n	80009b8 <__aeabi_d2f+0x90>
 80009a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009ac:	bf1e      	ittt	ne
 80009ae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009b6:	4770      	bxne	lr
 80009b8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <__aeabi_frsub>:
 80009c8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009cc:	e002      	b.n	80009d4 <__addsf3>
 80009ce:	bf00      	nop

080009d0 <__aeabi_fsub>:
 80009d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009d4 <__addsf3>:
 80009d4:	0042      	lsls	r2, r0, #1
 80009d6:	bf1f      	itttt	ne
 80009d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009dc:	ea92 0f03 	teqne	r2, r3
 80009e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009e8:	d06a      	beq.n	8000ac0 <__addsf3+0xec>
 80009ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f2:	bfc1      	itttt	gt
 80009f4:	18d2      	addgt	r2, r2, r3
 80009f6:	4041      	eorgt	r1, r0
 80009f8:	4048      	eorgt	r0, r1
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	bfb8      	it	lt
 80009fe:	425b      	neglt	r3, r3
 8000a00:	2b19      	cmp	r3, #25
 8000a02:	bf88      	it	hi
 8000a04:	4770      	bxhi	lr
 8000a06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a12:	bf18      	it	ne
 8000a14:	4240      	negne	r0, r0
 8000a16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a22:	bf18      	it	ne
 8000a24:	4249      	negne	r1, r1
 8000a26:	ea92 0f03 	teq	r2, r3
 8000a2a:	d03f      	beq.n	8000aac <__addsf3+0xd8>
 8000a2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a30:	fa41 fc03 	asr.w	ip, r1, r3
 8000a34:	eb10 000c 	adds.w	r0, r0, ip
 8000a38:	f1c3 0320 	rsb	r3, r3, #32
 8000a3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a44:	d502      	bpl.n	8000a4c <__addsf3+0x78>
 8000a46:	4249      	negs	r1, r1
 8000a48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a50:	d313      	bcc.n	8000a7a <__addsf3+0xa6>
 8000a52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a56:	d306      	bcc.n	8000a66 <__addsf3+0x92>
 8000a58:	0840      	lsrs	r0, r0, #1
 8000a5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a5e:	f102 0201 	add.w	r2, r2, #1
 8000a62:	2afe      	cmp	r2, #254	@ 0xfe
 8000a64:	d251      	bcs.n	8000b0a <__addsf3+0x136>
 8000a66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a6e:	bf08      	it	eq
 8000a70:	f020 0001 	biceq.w	r0, r0, #1
 8000a74:	ea40 0003 	orr.w	r0, r0, r3
 8000a78:	4770      	bx	lr
 8000a7a:	0049      	lsls	r1, r1, #1
 8000a7c:	eb40 0000 	adc.w	r0, r0, r0
 8000a80:	3a01      	subs	r2, #1
 8000a82:	bf28      	it	cs
 8000a84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a88:	d2ed      	bcs.n	8000a66 <__addsf3+0x92>
 8000a8a:	fab0 fc80 	clz	ip, r0
 8000a8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a92:	ebb2 020c 	subs.w	r2, r2, ip
 8000a96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9a:	bfaa      	itet	ge
 8000a9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa0:	4252      	neglt	r2, r2
 8000aa2:	4318      	orrge	r0, r3
 8000aa4:	bfbc      	itt	lt
 8000aa6:	40d0      	lsrlt	r0, r2
 8000aa8:	4318      	orrlt	r0, r3
 8000aaa:	4770      	bx	lr
 8000aac:	f092 0f00 	teq	r2, #0
 8000ab0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ab4:	bf06      	itte	eq
 8000ab6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000aba:	3201      	addeq	r2, #1
 8000abc:	3b01      	subne	r3, #1
 8000abe:	e7b5      	b.n	8000a2c <__addsf3+0x58>
 8000ac0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ac8:	bf18      	it	ne
 8000aca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ace:	d021      	beq.n	8000b14 <__addsf3+0x140>
 8000ad0:	ea92 0f03 	teq	r2, r3
 8000ad4:	d004      	beq.n	8000ae0 <__addsf3+0x10c>
 8000ad6:	f092 0f00 	teq	r2, #0
 8000ada:	bf08      	it	eq
 8000adc:	4608      	moveq	r0, r1
 8000ade:	4770      	bx	lr
 8000ae0:	ea90 0f01 	teq	r0, r1
 8000ae4:	bf1c      	itt	ne
 8000ae6:	2000      	movne	r0, #0
 8000ae8:	4770      	bxne	lr
 8000aea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000aee:	d104      	bne.n	8000afa <__addsf3+0x126>
 8000af0:	0040      	lsls	r0, r0, #1
 8000af2:	bf28      	it	cs
 8000af4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000af8:	4770      	bx	lr
 8000afa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000afe:	bf3c      	itt	cc
 8000b00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bxcc	lr
 8000b06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b12:	4770      	bx	lr
 8000b14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b18:	bf16      	itet	ne
 8000b1a:	4608      	movne	r0, r1
 8000b1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b20:	4601      	movne	r1, r0
 8000b22:	0242      	lsls	r2, r0, #9
 8000b24:	bf06      	itte	eq
 8000b26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2a:	ea90 0f01 	teqeq	r0, r1
 8000b2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b32:	4770      	bx	lr

08000b34 <__aeabi_ui2f>:
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e004      	b.n	8000b44 <__aeabi_i2f+0x8>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_i2f>:
 8000b3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b40:	bf48      	it	mi
 8000b42:	4240      	negmi	r0, r0
 8000b44:	ea5f 0c00 	movs.w	ip, r0
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b50:	4601      	mov	r1, r0
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	e01c      	b.n	8000b92 <__aeabi_l2f+0x2a>

08000b58 <__aeabi_ul2f>:
 8000b58:	ea50 0201 	orrs.w	r2, r0, r1
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f04f 0300 	mov.w	r3, #0
 8000b64:	e00a      	b.n	8000b7c <__aeabi_l2f+0x14>
 8000b66:	bf00      	nop

08000b68 <__aeabi_l2f>:
 8000b68:	ea50 0201 	orrs.w	r2, r0, r1
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b74:	d502      	bpl.n	8000b7c <__aeabi_l2f+0x14>
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	ea5f 0c01 	movs.w	ip, r1
 8000b80:	bf02      	ittt	eq
 8000b82:	4684      	moveq	ip, r0
 8000b84:	4601      	moveq	r1, r0
 8000b86:	2000      	moveq	r0, #0
 8000b88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b96:	fabc f28c 	clz	r2, ip
 8000b9a:	3a08      	subs	r2, #8
 8000b9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba0:	db10      	blt.n	8000bc4 <__aeabi_l2f+0x5c>
 8000ba2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bac:	f1c2 0220 	rsb	r2, r2, #32
 8000bb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb8:	eb43 0002 	adc.w	r0, r3, r2
 8000bbc:	bf08      	it	eq
 8000bbe:	f020 0001 	biceq.w	r0, r0, #1
 8000bc2:	4770      	bx	lr
 8000bc4:	f102 0220 	add.w	r2, r2, #32
 8000bc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bcc:	f1c2 0220 	rsb	r2, r2, #32
 8000bd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000bd8:	eb43 0002 	adc.w	r0, r3, r2
 8000bdc:	bf08      	it	eq
 8000bde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be2:	4770      	bx	lr

08000be4 <__gesf2>:
 8000be4:	f04f 3cff 	mov.w	ip, #4294967295
 8000be8:	e006      	b.n	8000bf8 <__cmpsf2+0x4>
 8000bea:	bf00      	nop

08000bec <__lesf2>:
 8000bec:	f04f 0c01 	mov.w	ip, #1
 8000bf0:	e002      	b.n	8000bf8 <__cmpsf2+0x4>
 8000bf2:	bf00      	nop

08000bf4 <__cmpsf2>:
 8000bf4:	f04f 0c01 	mov.w	ip, #1
 8000bf8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d011      	beq.n	8000c34 <__cmpsf2+0x40>
 8000c10:	b001      	add	sp, #4
 8000c12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c16:	bf18      	it	ne
 8000c18:	ea90 0f01 	teqne	r0, r1
 8000c1c:	bf58      	it	pl
 8000c1e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c22:	bf88      	it	hi
 8000c24:	17c8      	asrhi	r0, r1, #31
 8000c26:	bf38      	it	cc
 8000c28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c2c:	bf18      	it	ne
 8000c2e:	f040 0001 	orrne.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c38:	d102      	bne.n	8000c40 <__cmpsf2+0x4c>
 8000c3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c3e:	d105      	bne.n	8000c4c <__cmpsf2+0x58>
 8000c40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c44:	d1e4      	bne.n	8000c10 <__cmpsf2+0x1c>
 8000c46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c4a:	d0e1      	beq.n	8000c10 <__cmpsf2+0x1c>
 8000c4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_cfrcmple>:
 8000c54:	4684      	mov	ip, r0
 8000c56:	4608      	mov	r0, r1
 8000c58:	4661      	mov	r1, ip
 8000c5a:	e7ff      	b.n	8000c5c <__aeabi_cfcmpeq>

08000c5c <__aeabi_cfcmpeq>:
 8000c5c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c5e:	f7ff ffc9 	bl	8000bf4 <__cmpsf2>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	bf48      	it	mi
 8000c66:	f110 0f00 	cmnmi.w	r0, #0
 8000c6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c6c <__aeabi_fcmpeq>:
 8000c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c70:	f7ff fff4 	bl	8000c5c <__aeabi_cfcmpeq>
 8000c74:	bf0c      	ite	eq
 8000c76:	2001      	moveq	r0, #1
 8000c78:	2000      	movne	r0, #0
 8000c7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7e:	bf00      	nop

08000c80 <__aeabi_fcmplt>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff ffea 	bl	8000c5c <__aeabi_cfcmpeq>
 8000c88:	bf34      	ite	cc
 8000c8a:	2001      	movcc	r0, #1
 8000c8c:	2000      	movcs	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <__aeabi_fcmple>:
 8000c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c98:	f7ff ffe0 	bl	8000c5c <__aeabi_cfcmpeq>
 8000c9c:	bf94      	ite	ls
 8000c9e:	2001      	movls	r0, #1
 8000ca0:	2000      	movhi	r0, #0
 8000ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_fcmpge>:
 8000ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cac:	f7ff ffd2 	bl	8000c54 <__aeabi_cfrcmple>
 8000cb0:	bf94      	ite	ls
 8000cb2:	2001      	movls	r0, #1
 8000cb4:	2000      	movhi	r0, #0
 8000cb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cba:	bf00      	nop

08000cbc <__aeabi_fcmpgt>:
 8000cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc0:	f7ff ffc8 	bl	8000c54 <__aeabi_cfrcmple>
 8000cc4:	bf34      	ite	cc
 8000cc6:	2001      	movcc	r0, #1
 8000cc8:	2000      	movcs	r0, #0
 8000cca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cce:	bf00      	nop

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd4:	f000 fa4a 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd8:	f000 f812 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cdc:	f000 f8ae 	bl	8000e3c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ce0:	f000 f854 	bl	8000d8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // 启动PWM通道
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4804      	ldr	r0, [pc, #16]	@ (8000cf8 <main+0x28>)
 8000ce8:	f001 f938 	bl	8001f5c <HAL_TIM_PWM_Start>
  // 示例：旋转舵机到45°位置
  Set_Servo_Angle(90);
 8000cec:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <main+0x2c>)
 8000cee:	f000 f8d3 	bl	8000e98 <Set_Servo_Angle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cf2:	bf00      	nop
 8000cf4:	e7fd      	b.n	8000cf2 <main+0x22>
 8000cf6:	bf00      	nop
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	42b40000 	.word	0x42b40000

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b090      	sub	sp, #64	@ 0x40
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	2228      	movs	r2, #40	@ 0x28
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fd00 	bl	8002714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d30:	2301      	movs	r3, #1
 8000d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d34:	2302      	movs	r3, #2
 8000d36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d3e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fcd9 	bl	8001700 <HAL_RCC_OscConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d54:	f000 f92e 	bl	8000fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
 8000d5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2102      	movs	r1, #2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 ff46 	bl	8001c04 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d7e:	f000 f919 	bl	8000fb4 <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3740      	adds	r7, #64	@ 0x40
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	615a      	str	r2, [r3, #20]
 8000dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dae:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000db0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000db4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000db6:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000db8:	2247      	movs	r2, #71	@ 0x47
 8000dba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000dc4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000dc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dd6:	4818      	ldr	r0, [pc, #96]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000dd8:	f001 f870 	bl	8001ebc <HAL_TIM_PWM_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000de2:	f000 f8e7 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4619      	mov	r1, r3
 8000df4:	4810      	ldr	r0, [pc, #64]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000df6:	f001 fc2f 	bl	8002658 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e00:	f000 f8d8 	bl	8000fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e04:	2360      	movs	r3, #96	@ 0x60
 8000e06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4807      	ldr	r0, [pc, #28]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000e1c:	f001 f940 	bl	80020a0 <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e26:	f000 f8c5 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e2a:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <MX_TIM2_Init+0xac>)
 8000e2c:	f000 f916 	bl	800105c <HAL_TIM_MspPostInit>

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	@ 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000028 	.word	0x20000028

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_GPIO_Init+0x58>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a13      	ldr	r2, [pc, #76]	@ (8000e94 <MX_GPIO_Init+0x58>)
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_GPIO_Init+0x58>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_GPIO_Init+0x58>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <MX_GPIO_Init+0x58>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6193      	str	r3, [r2, #24]
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_GPIO_Init+0x58>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_GPIO_Init+0x58>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <MX_GPIO_Init+0x58>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6193      	str	r3, [r2, #24]
 8000e7e:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <MX_GPIO_Init+0x58>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000

08000e98 <Set_Servo_Angle>:

/* USER CODE BEGIN 4 */

// 设置舵机角度 (0°-180°)
void Set_Servo_Angle(float angle) {
 8000e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  // 限制角度范围
  if (angle < 0) angle = 0;
 8000ea2:	f04f 0100 	mov.w	r1, #0
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff feea 	bl	8000c80 <__aeabi_fcmplt>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <Set_Servo_Angle+0x20>
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
  if (angle > 180) angle = 180;
 8000eb8:	4938      	ldr	r1, [pc, #224]	@ (8000f9c <Set_Servo_Angle+0x104>)
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fefe 	bl	8000cbc <__aeabi_fcmpgt>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <Set_Servo_Angle+0x32>
 8000ec6:	4b35      	ldr	r3, [pc, #212]	@ (8000f9c <Set_Servo_Angle+0x104>)
 8000ec8:	607b      	str	r3, [r7, #4]

  // 计算脉宽时间
  float pulse_width = MIN_PULSE + (angle / 180.0) * (MAX_PULSE - MIN_PULSE);
 8000eca:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff faa0 	bl	8000414 <__aeabi_f2d>
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	460d      	mov	r5, r1
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fa9b 	bl	8000414 <__aeabi_f2d>
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa0 <Set_Servo_Angle+0x108>)
 8000ee4:	f7ff fc18 	bl	8000718 <__aeabi_ddiv>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4690      	mov	r8, r2
 8000eee:	4699      	mov	r9, r3
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <Set_Servo_Angle+0x10c>)
 8000ef2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fd69 	bl	80009d0 <__aeabi_fsub>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fa87 	bl	8000414 <__aeabi_f2d>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	f7ff fad9 	bl	80004c4 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4620      	mov	r0, r4
 8000f18:	4629      	mov	r1, r5
 8000f1a:	f7ff f91d 	bl	8000158 <__adddf3>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fcff 	bl	8000928 <__aeabi_d2f>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	60fb      	str	r3, [r7, #12]

  // 计算对应的寄存器值 (ARR=自动重装载值)
  uint32_t pulse = (pulse_width / 1000.0) * TIM_CLK / htim2.Init.Prescaler;
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f7ff fa70 	bl	8000414 <__aeabi_f2d>
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <Set_Servo_Angle+0x110>)
 8000f3a:	f7ff fbed 	bl	8000718 <__aeabi_ddiv>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4614      	mov	r4, r2
 8000f44:	461d      	mov	r5, r3
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <Set_Servo_Angle+0x114>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fa41 	bl	80003d0 <__aeabi_ui2d>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4620      	mov	r0, r4
 8000f54:	4629      	mov	r1, r5
 8000f56:	f7ff fab5 	bl	80004c4 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4614      	mov	r4, r2
 8000f60:	461d      	mov	r5, r3
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <Set_Servo_Angle+0x118>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fa32 	bl	80003d0 <__aeabi_ui2d>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4620      	mov	r0, r4
 8000f72:	4629      	mov	r1, r5
 8000f74:	f7ff fbd0 	bl	8000718 <__aeabi_ddiv>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fcb2 	bl	80008e8 <__aeabi_d2uiz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	60bb      	str	r3, [r7, #8]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <Set_Servo_Angle+0x118>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f9a:	bf00      	nop
 8000f9c:	43340000 	.word	0x43340000
 8000fa0:	40668000 	.word	0x40668000
 8000fa4:	40200000 	.word	0x40200000
 8000fa8:	408f4000 	.word	0x408f4000
 8000fac:	044aa200 	.word	0x044aa200
 8000fb0:	20000028 	.word	0x20000028

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <Error_Handler+0x8>

08000fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_MspInit+0x5c>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4a14      	ldr	r2, [pc, #80]	@ (800101c <HAL_MspInit+0x5c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6193      	str	r3, [r2, #24]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_MspInit+0x5c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_MspInit+0x5c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_MspInit+0x60>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <HAL_MspInit+0x60>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000

08001024 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001034:	d10b      	bne.n	800104e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_TIM_PWM_MspInit+0x34>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_TIM_PWM_MspInit+0x34>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_TIM_PWM_MspInit+0x34>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800107a:	d117      	bne.n	80010ac <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <HAL_TIM_MspPostInit+0x58>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a0c      	ldr	r2, [pc, #48]	@ (80010b4 <HAL_TIM_MspPostInit+0x58>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_TIM_MspPostInit+0x58>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001094:	2301      	movs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2302      	movs	r3, #2
 800109e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <HAL_TIM_MspPostInit+0x5c>)
 80010a8:	f000 f9a6 	bl	80013f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010800 	.word	0x40010800

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <NMI_Handler+0x4>

080010c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <MemManage_Handler+0x4>

080010d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f874 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001120:	f7ff fff8 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480b      	ldr	r0, [pc, #44]	@ (8001154 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001126:	490c      	ldr	r1, [pc, #48]	@ (8001158 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001128:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <LoopFillZerobss+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800113c:	4c09      	ldr	r4, [pc, #36]	@ (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f001 faeb 	bl	8002724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114e:	f7ff fdbf 	bl	8000cd0 <main>
  bx lr
 8001152:	4770      	bx	lr
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800115c:	080027b0 	.word	0x080027b0
  ldr r2, =_sbss
 8001160:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001164:	20000074 	.word	0x20000074

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f907 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff ff1a 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f911 	bl	80013de <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f8e7 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a03      	ldr	r2, [pc, #12]	@ (8001218 <HAL_IncTick+0x20>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000008 	.word	0x20000008
 8001218:	20000070 	.word	0x20000070

0800121c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	@ (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	20000070 	.word	0x20000070

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	@ (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	@ (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff90 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	@ (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff49 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff5e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff90 	bl	80012e8 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5f 	bl	8001294 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffb0 	bl	800134c <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b08b      	sub	sp, #44	@ 0x2c
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140a:	e169      	b.n	80016e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800140c:	2201      	movs	r2, #1
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8158 	bne.w	80016da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a9a      	ldr	r2, [pc, #616]	@ (8001698 <HAL_GPIO_Init+0x2a0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d05e      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001434:	4a98      	ldr	r2, [pc, #608]	@ (8001698 <HAL_GPIO_Init+0x2a0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d875      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800143a:	4a98      	ldr	r2, [pc, #608]	@ (800169c <HAL_GPIO_Init+0x2a4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d058      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001440:	4a96      	ldr	r2, [pc, #600]	@ (800169c <HAL_GPIO_Init+0x2a4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d86f      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001446:	4a96      	ldr	r2, [pc, #600]	@ (80016a0 <HAL_GPIO_Init+0x2a8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d052      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 800144c:	4a94      	ldr	r2, [pc, #592]	@ (80016a0 <HAL_GPIO_Init+0x2a8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d869      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001452:	4a94      	ldr	r2, [pc, #592]	@ (80016a4 <HAL_GPIO_Init+0x2ac>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d04c      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001458:	4a92      	ldr	r2, [pc, #584]	@ (80016a4 <HAL_GPIO_Init+0x2ac>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d863      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800145e:	4a92      	ldr	r2, [pc, #584]	@ (80016a8 <HAL_GPIO_Init+0x2b0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d046      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
 8001464:	4a90      	ldr	r2, [pc, #576]	@ (80016a8 <HAL_GPIO_Init+0x2b0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d85d      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d82a      	bhi.n	80014c4 <HAL_GPIO_Init+0xcc>
 800146e:	2b12      	cmp	r3, #18
 8001470:	d859      	bhi.n	8001526 <HAL_GPIO_Init+0x12e>
 8001472:	a201      	add	r2, pc, #4	@ (adr r2, 8001478 <HAL_GPIO_Init+0x80>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	080014f3 	.word	0x080014f3
 800147c:	080014cd 	.word	0x080014cd
 8001480:	080014df 	.word	0x080014df
 8001484:	08001521 	.word	0x08001521
 8001488:	08001527 	.word	0x08001527
 800148c:	08001527 	.word	0x08001527
 8001490:	08001527 	.word	0x08001527
 8001494:	08001527 	.word	0x08001527
 8001498:	08001527 	.word	0x08001527
 800149c:	08001527 	.word	0x08001527
 80014a0:	08001527 	.word	0x08001527
 80014a4:	08001527 	.word	0x08001527
 80014a8:	08001527 	.word	0x08001527
 80014ac:	08001527 	.word	0x08001527
 80014b0:	08001527 	.word	0x08001527
 80014b4:	08001527 	.word	0x08001527
 80014b8:	08001527 	.word	0x08001527
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014e9 	.word	0x080014e9
 80014c4:	4a79      	ldr	r2, [pc, #484]	@ (80016ac <HAL_GPIO_Init+0x2b4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ca:	e02c      	b.n	8001526 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e029      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	3304      	adds	r3, #4
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e024      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	3308      	adds	r3, #8
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e01f      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	330c      	adds	r3, #12
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e01a      	b.n	8001528 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014fa:	2304      	movs	r3, #4
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e013      	b.n	8001528 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001508:	2308      	movs	r3, #8
 800150a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	611a      	str	r2, [r3, #16]
          break;
 8001512:	e009      	b.n	8001528 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2308      	movs	r3, #8
 8001516:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	615a      	str	r2, [r3, #20]
          break;
 800151e:	e003      	b.n	8001528 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x130>
          break;
 8001526:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2bff      	cmp	r3, #255	@ 0xff
 800152c:	d801      	bhi.n	8001532 <HAL_GPIO_Init+0x13a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_Init+0x13e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2bff      	cmp	r3, #255	@ 0xff
 800153c:	d802      	bhi.n	8001544 <HAL_GPIO_Init+0x14c>
 800153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x152>
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	3b08      	subs	r3, #8
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	210f      	movs	r1, #15
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	401a      	ands	r2, r3
 800155c:	6a39      	ldr	r1, [r7, #32]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	431a      	orrs	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80b1 	beq.w	80016da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001578:	4b4d      	ldr	r3, [pc, #308]	@ (80016b0 <HAL_GPIO_Init+0x2b8>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a4c      	ldr	r2, [pc, #304]	@ (80016b0 <HAL_GPIO_Init+0x2b8>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b4a      	ldr	r3, [pc, #296]	@ (80016b0 <HAL_GPIO_Init+0x2b8>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001590:	4a48      	ldr	r2, [pc, #288]	@ (80016b4 <HAL_GPIO_Init+0x2bc>)
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a40      	ldr	r2, [pc, #256]	@ (80016b8 <HAL_GPIO_Init+0x2c0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d013      	beq.n	80015e4 <HAL_GPIO_Init+0x1ec>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a3f      	ldr	r2, [pc, #252]	@ (80016bc <HAL_GPIO_Init+0x2c4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00d      	beq.n	80015e0 <HAL_GPIO_Init+0x1e8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a3e      	ldr	r2, [pc, #248]	@ (80016c0 <HAL_GPIO_Init+0x2c8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d007      	beq.n	80015dc <HAL_GPIO_Init+0x1e4>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3d      	ldr	r2, [pc, #244]	@ (80016c4 <HAL_GPIO_Init+0x2cc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_GPIO_Init+0x1e0>
 80015d4:	2303      	movs	r3, #3
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015d8:	2304      	movs	r3, #4
 80015da:	e004      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015dc:	2302      	movs	r3, #2
 80015de:	e002      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_GPIO_Init+0x1ee>
 80015e4:	2300      	movs	r3, #0
 80015e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4093      	lsls	r3, r2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f6:	492f      	ldr	r1, [pc, #188]	@ (80016b4 <HAL_GPIO_Init+0x2bc>)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001610:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	492c      	ldr	r1, [pc, #176]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	608b      	str	r3, [r1, #8]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800161e:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4928      	ldr	r1, [pc, #160]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001638:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	4922      	ldr	r1, [pc, #136]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	60cb      	str	r3, [r1, #12]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	491e      	ldr	r1, [pc, #120]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001650:	4013      	ands	r3, r2
 8001652:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d006      	beq.n	800166e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4918      	ldr	r1, [pc, #96]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	43db      	mvns	r3, r3
 8001676:	4914      	ldr	r1, [pc, #80]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001678:	4013      	ands	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d021      	beq.n	80016cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	490e      	ldr	r1, [pc, #56]	@ (80016c8 <HAL_GPIO_Init+0x2d0>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]
 8001694:	e021      	b.n	80016da <HAL_GPIO_Init+0x2e2>
 8001696:	bf00      	nop
 8001698:	10320000 	.word	0x10320000
 800169c:	10310000 	.word	0x10310000
 80016a0:	10220000 	.word	0x10220000
 80016a4:	10210000 	.word	0x10210000
 80016a8:	10120000 	.word	0x10120000
 80016ac:	10110000 	.word	0x10110000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40010000 	.word	0x40010000
 80016b8:	40010800 	.word	0x40010800
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	40011000 	.word	0x40011000
 80016c4:	40011400 	.word	0x40011400
 80016c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <HAL_GPIO_Init+0x304>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	4909      	ldr	r1, [pc, #36]	@ (80016fc <HAL_GPIO_Init+0x304>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016dc:	3301      	adds	r3, #1
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f47f ae8e 	bne.w	800140c <HAL_GPIO_Init+0x14>
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	372c      	adds	r7, #44	@ 0x2c
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e272      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8087 	beq.w	800182e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001720:	4b92      	ldr	r3, [pc, #584]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b04      	cmp	r3, #4
 800172a:	d00c      	beq.n	8001746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800172c:	4b8f      	ldr	r3, [pc, #572]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d112      	bne.n	800175e <HAL_RCC_OscConfig+0x5e>
 8001738:	4b8c      	ldr	r3, [pc, #560]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001744:	d10b      	bne.n	800175e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001746:	4b89      	ldr	r3, [pc, #548]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d06c      	beq.n	800182c <HAL_RCC_OscConfig+0x12c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d168      	bne.n	800182c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e24c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x76>
 8001768:	4b80      	ldr	r3, [pc, #512]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a7f      	ldr	r2, [pc, #508]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800176e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e02e      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x98>
 800177e:	4b7b      	ldr	r3, [pc, #492]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7a      	ldr	r2, [pc, #488]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b78      	ldr	r3, [pc, #480]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a77      	ldr	r2, [pc, #476]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001790:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e01d      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0xbc>
 80017a2:	4b72      	ldr	r3, [pc, #456]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a71      	ldr	r2, [pc, #452]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a6e      	ldr	r2, [pc, #440]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0xd4>
 80017bc:	4b6b      	ldr	r3, [pc, #428]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b68      	ldr	r3, [pc, #416]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a67      	ldr	r2, [pc, #412]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fd1e 	bl	800121c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fd1a 	bl	800121c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	@ 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e200      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0xe4>
 8001802:	e014      	b.n	800182e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fd0a 	bl	800121c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fd06 	bl	800121c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	@ 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1ec      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	4b53      	ldr	r3, [pc, #332]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x10c>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d063      	beq.n	8001902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800183a:	4b4c      	ldr	r3, [pc, #304]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001846:	4b49      	ldr	r3, [pc, #292]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b08      	cmp	r3, #8
 8001850:	d11c      	bne.n	800188c <HAL_RCC_OscConfig+0x18c>
 8001852:	4b46      	ldr	r3, [pc, #280]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d116      	bne.n	800188c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	4b43      	ldr	r3, [pc, #268]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1c0      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4939      	ldr	r1, [pc, #228]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	e03a      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001894:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <HAL_RCC_OscConfig+0x270>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff fcbf 	bl	800121c <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff fcbb 	bl	800121c <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e1a1      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4927      	ldr	r1, [pc, #156]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b26      	ldr	r3, [pc, #152]	@ (8001970 <HAL_RCC_OscConfig+0x270>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fc9e 	bl	800121c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff fc9a 	bl	800121c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e180      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03a      	beq.n	8001984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d019      	beq.n	800194a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_RCC_OscConfig+0x274>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fc7e 	bl	800121c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fc7a 	bl	800121c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e160      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_RCC_OscConfig+0x26c>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001942:	2001      	movs	r0, #1
 8001944:	f000 fa9c 	bl	8001e80 <RCC_Delay>
 8001948:	e01c      	b.n	8001984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_RCC_OscConfig+0x274>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7ff fc64 	bl	800121c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001956:	e00f      	b.n	8001978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fc60 	bl	800121c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d908      	bls.n	8001978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e146      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000
 8001970:	42420000 	.word	0x42420000
 8001974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	4b92      	ldr	r3, [pc, #584]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e9      	bne.n	8001958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a6 	beq.w	8001ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001996:	4b8b      	ldr	r3, [pc, #556]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10d      	bne.n	80019be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a87      	ldr	r2, [pc, #540]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b85      	ldr	r3, [pc, #532]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b82      	ldr	r3, [pc, #520]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7e      	ldr	r2, [pc, #504]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fc21 	bl	800121c <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff fc1d 	bl	800121c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	@ 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e103      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b75      	ldr	r3, [pc, #468]	@ (8001bc8 <HAL_RCC_OscConfig+0x4c8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x312>
 8001a04:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a6e      	ldr	r2, [pc, #440]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	e02d      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x334>
 8001a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a69      	ldr	r2, [pc, #420]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	4b67      	ldr	r3, [pc, #412]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a66      	ldr	r2, [pc, #408]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	e01c      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x356>
 8001a3c:	4b61      	ldr	r3, [pc, #388]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a60      	ldr	r2, [pc, #384]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a5d      	ldr	r2, [pc, #372]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e00b      	b.n	8001a6e <HAL_RCC_OscConfig+0x36e>
 8001a56:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a5a      	ldr	r2, [pc, #360]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	4b58      	ldr	r3, [pc, #352]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a57      	ldr	r2, [pc, #348]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fbd1 	bl	800121c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fbcd 	bl	800121c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0b1      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ee      	beq.n	8001a7e <HAL_RCC_OscConfig+0x37e>
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fbbb 	bl	800121c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fbb7 	bl	800121c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e09b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	4b40      	ldr	r3, [pc, #256]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ee      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a3b      	ldr	r2, [pc, #236]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8087 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae8:	4b36      	ldr	r3, [pc, #216]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d061      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d146      	bne.n	8001b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b33      	ldr	r3, [pc, #204]	@ (8001bcc <HAL_RCC_OscConfig+0x4cc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fb8b 	bl	800121c <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff fb87 	bl	800121c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e06d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b30:	d108      	bne.n	8001b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b32:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4921      	ldr	r1, [pc, #132]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a19      	ldr	r1, [r3, #32]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	430b      	orrs	r3, r1
 8001b56:	491b      	ldr	r1, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x4cc>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fb5b 	bl	800121c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff fb57 	bl	800121c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e03d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x46a>
 8001b88:	e035      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_RCC_OscConfig+0x4cc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb44 	bl	800121c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff fb40 	bl	800121c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e026      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x498>
 8001bb6:	e01e      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e019      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_RCC_OscConfig+0x500>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0d0      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d910      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b67      	ldr	r3, [pc, #412]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 0207 	bic.w	r2, r3, #7
 8001c2e:	4965      	ldr	r1, [pc, #404]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d040      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	4b41      	ldr	r3, [pc, #260]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e073      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06b      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce2:	4b39      	ldr	r3, [pc, #228]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f023 0203 	bic.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4936      	ldr	r1, [pc, #216]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fa92 	bl	800121c <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff fa8e 	bl	800121c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e053      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 020c 	and.w	r2, r3, #12
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1eb      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d24:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d210      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4922      	ldr	r1, [pc, #136]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f821 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f9f0 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08002784 	.word	0x08002784
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x30>
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0x36>
 8001e06:	e027      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0a:	613b      	str	r3, [r7, #16]
      break;
 8001e0c:	e027      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0c9b      	lsrs	r3, r3, #18
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	4a17      	ldr	r2, [pc, #92]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d010      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0c5b      	lsrs	r3, r3, #17
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	4a11      	ldr	r2, [pc, #68]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3a:	fb03 f202 	mul.w	r2, r3, r2
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e004      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	613b      	str	r3, [r7, #16]
      break;
 8001e56:	e002      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5a:	613b      	str	r3, [r7, #16]
      break;
 8001e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5e:	693b      	ldr	r3, [r7, #16]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	007a1200 	.word	0x007a1200
 8001e74:	08002794 	.word	0x08002794
 8001e78:	080027a4 	.word	0x080027a4
 8001e7c:	003d0900 	.word	0x003d0900

08001e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e88:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <RCC_Delay+0x34>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <RCC_Delay+0x38>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0a5b      	lsrs	r3, r3, #9
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e9c:	bf00      	nop
  }
  while (Delay --);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1e5a      	subs	r2, r3, #1
 8001ea2:	60fa      	str	r2, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f9      	bne.n	8001e9c <RCC_Delay+0x1c>
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	10624dd3 	.word	0x10624dd3

08001ebc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e041      	b.n	8001f52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff f89e 	bl	8001024 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f000 f992 	bl	8002224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_TIM_PWM_Start+0x24>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e022      	b.n	8001fc6 <HAL_TIM_PWM_Start+0x6a>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d109      	bne.n	8001f9a <HAL_TIM_PWM_Start+0x3e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	bf14      	ite	ne
 8001f92:	2301      	movne	r3, #1
 8001f94:	2300      	moveq	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	e015      	b.n	8001fc6 <HAL_TIM_PWM_Start+0x6a>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d109      	bne.n	8001fb4 <HAL_TIM_PWM_Start+0x58>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e008      	b.n	8001fc6 <HAL_TIM_PWM_Start+0x6a>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e05e      	b.n	800208c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d104      	bne.n	8001fde <HAL_TIM_PWM_Start+0x82>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fdc:	e013      	b.n	8002006 <HAL_TIM_PWM_Start+0xaa>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d104      	bne.n	8001fee <HAL_TIM_PWM_Start+0x92>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fec:	e00b      	b.n	8002006 <HAL_TIM_PWM_Start+0xaa>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d104      	bne.n	8001ffe <HAL_TIM_PWM_Start+0xa2>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ffc:	e003      	b.n	8002006 <HAL_TIM_PWM_Start+0xaa>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	6839      	ldr	r1, [r7, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fafe 	bl	8002610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1e      	ldr	r2, [pc, #120]	@ (8002094 <HAL_TIM_PWM_Start+0x138>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d107      	bne.n	800202e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800202c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a18      	ldr	r2, [pc, #96]	@ (8002094 <HAL_TIM_PWM_Start+0x138>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00e      	beq.n	8002056 <HAL_TIM_PWM_Start+0xfa>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002040:	d009      	beq.n	8002056 <HAL_TIM_PWM_Start+0xfa>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <HAL_TIM_PWM_Start+0x13c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d004      	beq.n	8002056 <HAL_TIM_PWM_Start+0xfa>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a12      	ldr	r2, [pc, #72]	@ (800209c <HAL_TIM_PWM_Start+0x140>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d111      	bne.n	800207a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d010      	beq.n	800208a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002078:	e007      	b.n	800208a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40012c00 	.word	0x40012c00
 8002098:	40000400 	.word	0x40000400
 800209c:	40000800 	.word	0x40000800

080020a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e0ae      	b.n	800221c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	f200 809f 	bhi.w	800220c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020ce:	a201      	add	r2, pc, #4	@ (adr r2, 80020d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	08002109 	.word	0x08002109
 80020d8:	0800220d 	.word	0x0800220d
 80020dc:	0800220d 	.word	0x0800220d
 80020e0:	0800220d 	.word	0x0800220d
 80020e4:	08002149 	.word	0x08002149
 80020e8:	0800220d 	.word	0x0800220d
 80020ec:	0800220d 	.word	0x0800220d
 80020f0:	0800220d 	.word	0x0800220d
 80020f4:	0800218b 	.word	0x0800218b
 80020f8:	0800220d 	.word	0x0800220d
 80020fc:	0800220d 	.word	0x0800220d
 8002100:	0800220d 	.word	0x0800220d
 8002104:	080021cb 	.word	0x080021cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f8f6 	bl	8002300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0208 	orr.w	r2, r2, #8
 8002122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6999      	ldr	r1, [r3, #24]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	619a      	str	r2, [r3, #24]
      break;
 8002146:	e064      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f93c 	bl	80023cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6999      	ldr	r1, [r3, #24]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	021a      	lsls	r2, r3, #8
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	619a      	str	r2, [r3, #24]
      break;
 8002188:	e043      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f985 	bl	80024a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69da      	ldr	r2, [r3, #28]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0208 	orr.w	r2, r2, #8
 80021a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0204 	bic.w	r2, r2, #4
 80021b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69d9      	ldr	r1, [r3, #28]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	61da      	str	r2, [r3, #28]
      break;
 80021c8:	e023      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 f9cf 	bl	8002574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69d9      	ldr	r1, [r3, #28]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	021a      	lsls	r2, r3, #8
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	61da      	str	r2, [r3, #28]
      break;
 800220a:	e002      	b.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	75fb      	strb	r3, [r7, #23]
      break;
 8002210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a2f      	ldr	r2, [pc, #188]	@ (80022f4 <TIM_Base_SetConfig+0xd0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00b      	beq.n	8002254 <TIM_Base_SetConfig+0x30>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002242:	d007      	beq.n	8002254 <TIM_Base_SetConfig+0x30>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a2c      	ldr	r2, [pc, #176]	@ (80022f8 <TIM_Base_SetConfig+0xd4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d003      	beq.n	8002254 <TIM_Base_SetConfig+0x30>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a2b      	ldr	r2, [pc, #172]	@ (80022fc <TIM_Base_SetConfig+0xd8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800225a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <TIM_Base_SetConfig+0xd0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0x62>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0x62>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1f      	ldr	r2, [pc, #124]	@ (80022f8 <TIM_Base_SetConfig+0xd4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0x62>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1e      	ldr	r2, [pc, #120]	@ (80022fc <TIM_Base_SetConfig+0xd8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <TIM_Base_SetConfig+0xd0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d103      	bne.n	80022cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f023 0201 	bic.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
  }
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40000400 	.word	0x40000400
 80022fc:	40000800 	.word	0x40000800

08002300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f023 0201 	bic.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800232e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 0303 	bic.w	r3, r3, #3
 8002336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f023 0302 	bic.w	r3, r3, #2
 8002348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a1c      	ldr	r2, [pc, #112]	@ (80023c8 <TIM_OC1_SetConfig+0xc8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d10c      	bne.n	8002376 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f023 0308 	bic.w	r3, r3, #8
 8002362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <TIM_OC1_SetConfig+0xc8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d111      	bne.n	80023a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800238c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	621a      	str	r2, [r3, #32]
}
 80023bc:	bf00      	nop
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40012c00 	.word	0x40012c00

080023cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f023 0210 	bic.w	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f023 0320 	bic.w	r3, r3, #32
 8002416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <TIM_OC2_SetConfig+0xd0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d10d      	bne.n	8002448 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002446:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a14      	ldr	r2, [pc, #80]	@ (800249c <TIM_OC2_SetConfig+0xd0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d113      	bne.n	8002478 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800245e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	621a      	str	r2, [r3, #32]
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012c00 	.word	0x40012c00

080024a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002570 <TIM_OC3_SetConfig+0xd0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10d      	bne.n	800251a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a14      	ldr	r2, [pc, #80]	@ (8002570 <TIM_OC3_SetConfig+0xd0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d113      	bne.n	800254a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	621a      	str	r2, [r3, #32]
}
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40012c00 	.word	0x40012c00

08002574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	031b      	lsls	r3, r3, #12
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a0f      	ldr	r2, [pc, #60]	@ (800260c <TIM_OC4_SetConfig+0x98>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d109      	bne.n	80025e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	621a      	str	r2, [r3, #32]
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	40012c00 	.word	0x40012c00

08002610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	2201      	movs	r2, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a1a      	ldr	r2, [r3, #32]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a1a      	ldr	r2, [r3, #32]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	621a      	str	r2, [r3, #32]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800266c:	2302      	movs	r3, #2
 800266e:	e046      	b.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a16      	ldr	r2, [pc, #88]	@ (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00e      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026bc:	d009      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a12      	ldr	r2, [pc, #72]	@ (800270c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10c      	bne.n	80026ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400
 8002710:	40000800 	.word	0x40000800

08002714 <memset>:
 8002714:	4603      	mov	r3, r0
 8002716:	4402      	add	r2, r0
 8002718:	4293      	cmp	r3, r2
 800271a:	d100      	bne.n	800271e <memset+0xa>
 800271c:	4770      	bx	lr
 800271e:	f803 1b01 	strb.w	r1, [r3], #1
 8002722:	e7f9      	b.n	8002718 <memset+0x4>

08002724 <__libc_init_array>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	2600      	movs	r6, #0
 8002728:	4d0c      	ldr	r5, [pc, #48]	@ (800275c <__libc_init_array+0x38>)
 800272a:	4c0d      	ldr	r4, [pc, #52]	@ (8002760 <__libc_init_array+0x3c>)
 800272c:	1b64      	subs	r4, r4, r5
 800272e:	10a4      	asrs	r4, r4, #2
 8002730:	42a6      	cmp	r6, r4
 8002732:	d109      	bne.n	8002748 <__libc_init_array+0x24>
 8002734:	f000 f81a 	bl	800276c <_init>
 8002738:	2600      	movs	r6, #0
 800273a:	4d0a      	ldr	r5, [pc, #40]	@ (8002764 <__libc_init_array+0x40>)
 800273c:	4c0a      	ldr	r4, [pc, #40]	@ (8002768 <__libc_init_array+0x44>)
 800273e:	1b64      	subs	r4, r4, r5
 8002740:	10a4      	asrs	r4, r4, #2
 8002742:	42a6      	cmp	r6, r4
 8002744:	d105      	bne.n	8002752 <__libc_init_array+0x2e>
 8002746:	bd70      	pop	{r4, r5, r6, pc}
 8002748:	f855 3b04 	ldr.w	r3, [r5], #4
 800274c:	4798      	blx	r3
 800274e:	3601      	adds	r6, #1
 8002750:	e7ee      	b.n	8002730 <__libc_init_array+0xc>
 8002752:	f855 3b04 	ldr.w	r3, [r5], #4
 8002756:	4798      	blx	r3
 8002758:	3601      	adds	r6, #1
 800275a:	e7f2      	b.n	8002742 <__libc_init_array+0x1e>
 800275c:	080027a8 	.word	0x080027a8
 8002760:	080027a8 	.word	0x080027a8
 8002764:	080027a8 	.word	0x080027a8
 8002768:	080027ac 	.word	0x080027ac

0800276c <_init>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr

08002778 <_fini>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr
